
2023 01 29

11 nullptr   NULL 0   
11 constexpr 编译器能够在编译时就把这些表达式直接优化并植入到程序运行时
     14 内存使用局部变量

2023 01 30
17 if switch 中 临时变量

11 初始化列表 

11 std::tuple std::tie 

17 结构化绑定
	std::tuple <int ,double,std::string>f(){
		return std::make_tuple(1,2.3,"123");
	}
	auto [x,y,z]=f();
	std::cout<<x<<y<<z<<std::endl;

11 auto decltype（表达式）   std::is_same<decltype(x),int>::value
20 auto 函数传参    不能用于推导数组类型

11 尾返回类型 auto 
	template<typename T, typename U>
	auto add2(T x, U y) -> decltype(x+y){
		return x + y;
	}
14  template<typename T, typename U>
	auto add3(T x, U y){
		return x + y;
	}

14 decltype(auto) 主要用于对转发函数或封装的返回类型进行推导，
   它使我们无需显式的指定 decltype 的参数表达式
	decltype(auto) look_up_a_string_1() {
		return lookup1();
	}

17 constexpr 这个关键字引入到 if 语句中  让代码在编译时就完成分支判断

	if constexpr (std::is_integral<T>::value) {
		return t + 1;
	} else {
		return t + 0.001;
	}

11 for (auto data : vec)  区间for迭代

11 using name = oldname       typedef 原名称 新名称

2023 01 31

11 变长参数模板 template<typename... Ts> class Magic; 
允许任意个数、任意类别的模板参数，同时也不需要在定义时将参数的个数固定

函数参数  也使用同样的表示法代表不定长参数
template<typename... Args> void printf(const std::string &str, Args... args);

解包
    
1.递归模板函数
不断递归地向函数传递模板参数，进而达到递归遍历所有模板参数的目的
#include <iostream>
template<typename T0>
void printf1(T0 value) {
	std::cout << value << std::endl;
}
template<typename T, typename... Ts>
void printf1(T value, Ts... args) {
	std::cout << value << std::endl;
	printf1(args...);
}
int main() {
	printf1(1, 2, "123", 1.1);
	return 0;
}

2.变参模板展开
17
template<typename T0, typename... T>
void printf2(T0 t0, T... t) {
	std::cout << t0 << std::endl;
	if constexpr (sizeof...(t) > 0) printf2(t...);
}

3.初始化列表展开
template<typename T, typename... Ts>
auto printf3(T value, Ts... args) {
	std::cout << value << std::endl;
	(void) std::initializer_list<T>{([&args] {
		std::cout << args << std::endl;
	}(), value)...};
}

17 折叠表达式 
#include <iostream>
template<typename ... T>
auto sum(T ... t) {
	return (t + ...);
}
int main() {
	std::cout << sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) << std::endl;
}


2023 02 01

11 非模板类型推导
template <typename T, int BufSize>
class buffer_t {
public:
	T& alloc();
	void free(T& item);
private:
	T data[BufSize];
}

buffer_t<int, 100> buf; // 100 作为模板参数

17 auto 作为非模板类型推导
template <auto value> void foo() {
	std::cout << value << std::endl;
	return;
}
int main() {
	foo<10>(); // value 被推导为 int 类型
}


11 委托构造 构造函数可以在同一个类中一个构造函数调用另一个构造函数
#include <iostream>
class Base {
public:
		int value1;
	int value2;
	Base() {
		value1 = 1;
	}
	Base(int value) : Base() { // 委托 Base() 构造函数
		value2 = value;
	}
};

11 继承构造
class Subclass : public Base {
	public:
		using Base::Base; // 继承构造
};

11 显示虚函数重载  override final
override 关键字将显式的告知编译器进行重载，
编译器将检查基函数是否存在这样的虚函数，否则将无法通过编译
final 则是为了防止类被继续继承以及终止虚函数继续重载引入的

11 显示禁用默认函数
class Magic {
	public:
		Magic() = default; // 显式声明使用编译器生成的构造
		Magic& operator=(const Magic&) = delete; // 显式声明拒绝编译器生成构造
		Magic(int magic_number);
}

11 强类型枚举  enum class
enum class new_enum : unsigned int {
	value1,
	value2,
	value3 = 100,
	value4 = 100
};
不能够被隐式的转换为整数，同时也不能够将其与整数数
字进行比较，更不可能对不同的枚举类型的枚举值进行比较。
但相同枚举值之间如果指定的值相同，那么可以进行比较：
if (new_enum::value3 == new_enum::value4) {
	// 会输出
	std::cout << "new_enum::value3 == new_enum::value4" << std::endl;
}

显示的进行类型转换->获得枚举值
#include <iostream>
template<typename T>
std::ostream& operator<<(
	typename std::enable_if<std::is_enum<T>::value,
		std::ostream>::type& stream, const T& e)
	{
		return stream << static_cast<typename std::underlying_type<T>::type>(e);
	}


11 Lambda表达式

[捕获列表](参数列表) mutable(可选) 异常属性 -> 返回类型 {
// 函数体
}

值捕获=  引用捕获&  隐式捕获[] 
表达式捕获 （捕获右值）
#include <iostream>
#include <memory> // std::make_unique
#include <utility> // std::move
void lambda_expression_capture() {
	auto important = std::make_unique<int>(1);
	auto add = [v1 = 1, v2 = std::move(important)](int x, int y) -> int {
		return x+y+v1+(*v2);
	};
	std::cout << add(3,4) << std::endl;
}
在上面的代码中， important 是一个独占指针，是不能够被 “=” 值捕获到，这时候我们可以将其转
移为右值，在表达式中初始化。


14 泛型Lambda  auto
auto add = [](auto x, auto y) {
	return x+y;
};
add(1, 2);
add(1.1, 2.2);


11 函数对象包装器 std::function 是一种通用、多态的函数封装，它的实例可以对任何可以调用的目标实体进
行存储、复制和调用操作。
函数的容器。

11 std::bind函数的意义就如字面上的意思一样，用来绑定函数调用的某些参数。
std::bind的思想其实是一种延迟计算的思想，将可调用对象保存起来，然后在需要的时候再调用。而且这种绑定是非常灵活的，不论是普通函数还是函数对象还是成员函数都可以绑定，而且其参数可以支持占位符。

这里的std::placeholders::_1是一个占位符，且绑定第一个参数，若可调用实体有2个形参，那么绑定第二个参数的占位符是std::placeholders::_2。

int foo(int a, int b, int c) {
;
}
int main() {
	auto bindFoo = std::bind(foo, std::placeholders::_1, 1,2);
	// 这时调用 bindFoo 时，只需要提供第一个参数即可
	bindFoo(1);
}

11 右值引用 右边的值，是指表达式结束后就不再存在的临时对象。
纯右值、将亡值。
将亡值 (xvalue, expiring value)，是 C++11 为了引入右值引用而提出的概念。
将亡值就定义了这样一种行为：临时的值能够被识别、同时又能够被移动。
std::vector<int> foo() {
	std::vector<int> temp = {1, 2, 3, 4};
	return temp;
}
std::vector<int> v = foo();

右值引用和左值引用
要拿到一个将亡值，就需要用到右值引用： T &&。
右值引用的声明让这个临时值的生命周期得以延长、只要变量还活着，那么将亡值将继续存活。
11 提供了 std::move 这个方法将左值参数无条件的转换为右值。

// int &a = std::move(1); // 不合法，非常量左引用无法引用右值
const int &b = std::move(1); // 合法, 常量左引用允许引用右值

移动语义  std::move 不会出现拷贝行为
std::string str = "Hello world.";
std::vector<std::string> v;
// 将使用 push_back(const T&), 即产生拷贝行为
v.push_back(str);
// 将输出 "str: Hello world."
std::cout << "str: " << str << std::endl;
// 将使用 push_back(const T&&), 不会出现拷贝行为
// 而整个字符串会被移动到 vector 中，所以有时候 std::move 会用来减少拷贝出现的开销
// 这步操作后, str 中的值会变为空
v.push_back(std::move(str));
// 将输出 "str: "
std::cout << "str: " << str << std::endl;


引用坍缩规则：在传统 C++ 中，我们不能够对一个引用类型继续进行引用


完美转发   std::forward
就是为了让我们在传递参数的时候，保持原来
的参数类型（左引用保持左引用，右引用保持右引用）。
为了解决这个问题，我们应该使用 std::forward 来进行参数的转发（传递）：

无论传递参数为左值还是右值，普通传参都会将参数作为左值进行转发，所以 std::move 总会接受
到一个左值，从而转发调用了 reference(int&&) 输出右值引用。
唯独 std::forward 即没有造成任何多余的拷贝，同时完美转发 (传递) 了函数的实参给了内部调用
的其他函数。
std::forward 和 std::move 一样，没有做任何事情， std::move 单纯的将左值转化为右值，
std::forward 也只是单纯的将参数做了一个类型的转换，从现象上来看， std::forward<T>(v) 和
static_cast<T&&>(v) 是完全一样的。



11 std::array
std::vector v;   capacity 成倍申请内存后并没有被释放。
v.shrink_to_fit(); 返回给系统

std::array<int, 4> arr = {1, 2, 3, 4};
std::sort(arr.begin(), arr.end(), [](int a, int b) {
	return b < a;
});


void foo(int *p, int len) {return;}
std::array<int, 4> arr = {1,2,3,4};
// C 风格接口传参
// foo(arr, arr.size()); // 非法, 无法隐式转换
foo(&arr[0], arr.size());
foo(arr.data(), arr.size());




11 std::forward_list   单向链表 0(1)复杂度插入  list 双向链表


有序容器 std::map /std::set  红黑树  插入搜索 o(log(size)) 
11 无序容器  Hash表  插入搜索 o(constant)
std::unordered_map/std::unordered_multimap 
std::unordered_set/std::unordered_multiset


11 元组 tuple
1. std::make_tuple: 构造元组
2. std::get: 获得元组某个位置的值
3. std::tie: 元组拆包

auto student = std::make_tuple(3.8, ’A’, " 张三");
std::get<0>(student);

double gpa;char grade; std::string name;
std::tie(gpa, grade, name) = student;

	14  根据使用类型 获得元组中的对象
	std::tuple<std::string, double, double, int> t("123", 4.5, 6.7, 8);
	std::cout << std::get<std::string>(t) << std::endl;
	std::cout << std::get<double>(t) << std::endl; // 非法, 引发编译期错误
	std::cout << std::get<3>(t) << std::endl;



std::tuple<std::string, double, double, int> t("123", 4.5, 6.7, 8);

17 运行期索引  std::variant<>
std::get的局限 
	int index = 1;
	std::get<index>(t);
上面这个不合法。
#include <variant>
template <size_t n, typename... T>
constexpr std::variant<T...> _tuple_index(const std::tuple<T...>& tpl, size_t i) {
	if constexpr (n >= sizeof...(T))
		throw std::out_of_range(" 越界.");
	if (i == n)
		return std::variant<T...>{ std::in_place_index<n>, std::get<n>(tpl) };
	return _tuple_index<(n < sizeof...(T)-1 ? n+1 : 0)>(tpl, i);
}
template <typename... T>
constexpr std::variant<T...> tuple_index(const std::tuple<T...>& tpl, size_t i) {
	return _tuple_index<0>(tpl, i);
}
template <typename T0, typename ... Ts>
std::ostream & operator<< (std::ostream & s, std::variant<T0, Ts...> const & v) {
	std::visit([&](auto && x){ s << x;}, v);
	return s;
}
这样就可以 
int i = 1;
std::cout << tuple_index(t, i) << std::endl;

元组合并和遍历  tuple_cat

auto student = std::make_tuple(3.8, ’A’, " 张三");
auto new_tuple = std::tuple_cat(student, std::move(t));

template <typename T>
auto tuple_len(T &tpl) {
	return std::tuple_size<T>::value;
}

// 迭代
for(int i = 0; i != tuple_len(new_tuple); ++i)
	// 运行期索引
	std::cout << tuple_index(new_tuple, i) << std::endl;



RAII和引用计数
11 std::shared_ptr/std::unique_ptr/std::weak_ptr

std::make_shared
auto pointer = std::make_shared<int>(10);

std::shared_ptr 可以通过 get() 方法来获取原始指针，通过 reset() 来减少一个引用计数，并
通过 use_count() 来查看一个对象的引用计数。


std::unique_ptr<int> pointer = std::make_unique<int>(10); // make_unique 从 C++14 引入
make_unique 并不复杂， C++11 没有提供 std::make_unique，可以自行实现：
template<typename T, typename ...Args>
std::unique_ptr<T> make_unique( Args&& ...args ) {
	return std::unique_ptr<T>( new T( std::forward<Args>(args)... ) );
}

可以使用std::move 转移给其他 unique_ptr

std::weak_ptr     （弱引用）
当A、B两个std::shared_ptr互相引用时，析构无法释放资源，引用计数各为1。
弱引用不会引起计数增加

可以std::shared_ptr 是否存在，其 expired() 方法能在资源未被释放时，会返回 false，否则返回 true；
它也可以用于获取指向原始对象的 std::shared_ptr 指针，其 lock() 方法在原始对象未被释放时，
返回一个指向原始对象的 std::shared_ptr 指针，进而访问原始对象的资源，否则返回nullptr。


正则表达式   ：  正则表达式必知必会
新书地址： https://forta.com/books/0134757068/
https://regex101.com/
https://www.regextester.com/


.
\.
[a-z][A-z]
[^0-9]			^
window : 	\r\n\r\n
linux:		\n\n
\r 回车
\n 换行

\d	[0-9]
\D	[^0-9]
\w	[a-zA-Z0-9_]
\W	[^a-zA-Z0-9_]
\s	空白字符
\S	非空白字符

+	匹配1+
*	匹配0+
？	匹配0或1
{}	匹配多少个 {1,2}{2,4}   {3,}必须3次或以上
*? +? {n,}? 懒惰型元字符

\b	单词边界
\B	没有单词边界

()	子表达式



#include <iostream>
#include <string>
#include <regex>
int main() {
	std::string fnames[] = {"foo.txt", "bar.txt", "test", "a0.txt", "AAA.txt"};
	// 在 C++ 中 \ 会被作为字符串内的转义符，
	// 为使 \. 作为正则表达式传递进去生效，需要对 \ 进行二次转义，从而有 \\.
	std::regex txt_regex("[a-z]+\\.txt");
	for (const auto &fname: fnames)
		std::cout << fname << ": " << std::regex_match(fname, txt_regex) << std::endl;
}

result: 1 1 0 0 0

std::regex base_regex("([a-z]+)\\.txt");
std::smatch base_match;
for(const auto &fname: fnames) {
	if (std::regex_match(fname, base_match, base_regex)) {
		// std::smatch 的第一个元素匹配整个字符串
		// std::smatch 的第二个元素匹配了第一个括号表达式
		if (base_match.size() == 2) {
			std::string base = base_match[1].str();
			std::cout << "sub-match[0]: " << base_match[0].str() << std::endl;
			std::cout << fname << " sub-match[1]: " << base << std::endl;
		}
	}
}

result : 
sub-match[0]: foo.txt
foo.txt sub-match[1]: foo
sub-match[0]: bar.txt
bar.txt sub-match[1]: bar





并行与并发

<thread>
11 mutex

static std::mutex mtx;
11 std::lock_guard<std::mutex> lock(mtx);


aaa(int i){}

std::thread t1(aaa,2),t2(aaa,3);
t1.join();
t2.join();

std::unique_lock

std::lock_guard 不能显式的调用 lock 和 unlock，
而 std::unique_lock 可以在声明后的任意位置调用，可以缩小锁的作用范围，提供更高的并发度

void critical_section(int change_v) {
	static std::mutex mtx;
	std::unique_lock<std::mutex> lock(mtx);
	// 执行竞争操作
	v = change_v;
	std::cout << v << std::endl;
	// 将锁进行释放
	lock.unlock();
	
	// 在此期间，任何人都可以抢夺 v 的持有权
	
	// 开始另一组竞争操作，再次加锁
	lock.lock();
	v += 1;
	std::cout << v << std::endl;
}

